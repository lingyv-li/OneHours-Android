package com.guanmu.onehours;

import org.greenrobot.greendao.annotation.*;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DLINK_TAG_POINT".
 */
@Entity(active = true)
public class DLinkTagPoint {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String tagId;

    @NotNull
    private String pointId;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;


    @ToOne(joinProperty = "pointId")
    private DPoint dPoint;

    @Generated(hash = 1796062736)
    private transient String dPoint__resolvedKey;

    @ToOne(joinProperty = "tagId")
    private DTag dTag;

    @Generated(hash = 536707069)
    private transient String dTag__resolvedKey;

    /** Used for active entity operations. */
    @Generated(hash = 1946831970)
    private transient DLinkTagPointDao myDao;

    

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated(hash = 1002580412)
    public DLinkTagPoint() {
    }

    public DLinkTagPoint(Long id) {
        this.id = id;
    }

    @Generated(hash = 953293060)
    public DLinkTagPoint(Long id, @NotNull String tagId, @NotNull String pointId) {
        this.id = id;
        this.tagId = tagId;
        this.pointId = pointId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getTagId() {
        return tagId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTagId(@NotNull String tagId) {
        this.tagId = tagId;
    }

    @NotNull
    public String getPointId() {
        return pointId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPointId(@NotNull String pointId) {
        this.pointId = pointId;
    }



    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 712484505)
    public void setDPoint(@NotNull DPoint dPoint) {
        if (dPoint == null) {
            throw new DaoException("To-one property 'pointId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dPoint = dPoint;
            pointId = dPoint.getGUID();
            dPoint__resolvedKey = pointId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1638677878)
    public DPoint getDPoint() {
        String __key = this.pointId;
        if (dPoint__resolvedKey == null || dPoint__resolvedKey != __key) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DPointDao targetDao = daoSession.getDPointDao();
            DPoint dPointNew = targetDao.load(__key);
            synchronized (this) {
                dPoint = dPointNew;
                dPoint__resolvedKey = __key;
            }
        }
        return dPoint;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1663598784)
    public DTag getDTag() {
        String __key = this.tagId;
        if (dTag__resolvedKey == null || dTag__resolvedKey != __key) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DTagDao targetDao = daoSession.getDTagDao();
            DTag dTagNew = targetDao.load(__key);
            synchronized (this) {
                dTag = dTagNew;
                dTag__resolvedKey = __key;
            }
        }
        return dTag;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1323043950)
    public void setDTag(@NotNull DTag dTag) {
        if (dTag == null) {
            throw new DaoException("To-one property 'tagId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dTag = dTag;
            tagId = dTag.getGUID();
            dTag__resolvedKey = tagId;
        }
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 454831574)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDLinkTagPointDao() : null;
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
