package com.guanmu.onehours;

import org.greenrobot.greendao.annotation.*;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DLINK_TASK_POINT".
 */
@Entity(active = true)
public class DLinkTaskPoint {

    @Id(autoincrement = true)
    private Long id;

    @NotNull
    private String taskId;

    @NotNull
    private String pointId;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;

    @ToOne(joinProperty = "taskId")
    private DTask dTask;

    @Generated(hash = 1897872842)
    private transient String dTask__resolvedKey;

    @ToOne(joinProperty = "pointId")
    private DPoint dPoint;

    @Generated(hash = 1796062736)
    private transient String dPoint__resolvedKey;

    /** Used for active entity operations. */
    @Generated(hash = 482692755)
    private transient DLinkTaskPointDao myDao;

    

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated(hash = 365307715)
    public DLinkTaskPoint() {
    }

    public DLinkTaskPoint(Long id) {
        this.id = id;
    }

    @Generated(hash = 1147924124)
    public DLinkTaskPoint(Long id, @NotNull String taskId, @NotNull String pointId) {
        this.id = id;
        this.taskId = taskId;
        this.pointId = pointId;
    }

    public Long getId() {
        return id;
    }

    public void setId(Long id) {
        this.id = id;
    }

    @NotNull
    public String getTaskId() {
        return taskId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setTaskId(@NotNull String taskId) {
        this.taskId = taskId;
    }

    @NotNull
    public String getPointId() {
        return pointId;
    }

    /** Not-null value; ensure this value is available before it is saved to the database. */
    public void setPointId(@NotNull String pointId) {
        this.pointId = pointId;
    }


    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1841753100)
    public void setDTask(@NotNull DTask dTask) {
        if (dTask == null) {
            throw new DaoException("To-one property 'taskId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dTask = dTask;
            taskId = dTask.getGUID();
            dTask__resolvedKey = taskId;
        }
    }


    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 712484505)
    public void setDPoint(@NotNull DPoint dPoint) {
        if (dPoint == null) {
            throw new DaoException("To-one property 'pointId' has not-null constraint; cannot set to-one to null");
        }
        synchronized (this) {
            this.dPoint = dPoint;
            pointId = dPoint.getGUID();
            dPoint__resolvedKey = pointId;
        }
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1119258945)
    public DTask getDTask() {
        String __key = this.taskId;
        if (dTask__resolvedKey == null || dTask__resolvedKey != __key) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DTaskDao targetDao = daoSession.getDTaskDao();
            DTask dTaskNew = targetDao.load(__key);
            synchronized (this) {
                dTask = dTaskNew;
                dTask__resolvedKey = __key;
            }
        }
        return dTask;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 1638677878)
    public DPoint getDPoint() {
        String __key = this.pointId;
        if (dPoint__resolvedKey == null || dPoint__resolvedKey != __key) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DPointDao targetDao = daoSession.getDPointDao();
            DPoint dPointNew = targetDao.load(__key);
            synchronized (this) {
                dPoint = dPointNew;
                dPoint__resolvedKey = __key;
            }
        }
        return dPoint;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 705061493)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDLinkTaskPointDao() : null;
    }


    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
