package com.guanmu.onehours;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DTASK".
*/
public class DTaskDao extends AbstractDao<DTask, String> {

    public static final String TABLENAME = "DTASK";

    /**
     * Properties of entity DTask.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GUID = new Property(0, String.class, "GUID", true, "GUID");
        public final static Property Date = new Property(1, java.util.Date.class, "date", false, "DATE");
        public final static Property UsedTime = new Property(2, long.class, "usedTime", false, "USED_TIME");
        public final static Property Count = new Property(3, int.class, "count", false, "COUNT");
        public final static Property LastUpdated = new Property(4, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
    }

    private DaoSession daoSession;

    private Query<DTask> dPoint_DTaskListQuery;

    public DTaskDao(DaoConfig config) {
        super(config);
    }
    
    public DTaskDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DTASK\" (" + //
                "\"GUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: GUID
                "\"DATE\" INTEGER," + // 1: date
                "\"USED_TIME\" INTEGER NOT NULL ," + // 2: usedTime
                "\"COUNT\" INTEGER NOT NULL ," + // 3: count
                "\"LAST_UPDATED\" INTEGER);"); // 4: lastUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DTASK\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DTask entity) {
        stmt.clearBindings();
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(1, GUID);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
        stmt.bindLong(3, entity.getUsedTime());
        stmt.bindLong(4, entity.getCount());
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(5, lastUpdated.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DTask entity) {
        stmt.clearBindings();
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(1, GUID);
        }
 
        java.util.Date date = entity.getDate();
        if (date != null) {
            stmt.bindLong(2, date.getTime());
        }
        stmt.bindLong(3, entity.getUsedTime());
        stmt.bindLong(4, entity.getCount());
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(5, lastUpdated.getTime());
        }
    }

    @Override
    protected final void attachEntity(DTask entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DTask readEntity(Cursor cursor, int offset) {
        DTask entity = new DTask( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // GUID
            cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)), // date
            cursor.getLong(offset + 2), // usedTime
            cursor.getInt(offset + 3), // count
            cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)) // lastUpdated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DTask entity, int offset) {
        entity.setGUID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setDate(cursor.isNull(offset + 1) ? null : new java.util.Date(cursor.getLong(offset + 1)));
        entity.setUsedTime(cursor.getLong(offset + 2));
        entity.setCount(cursor.getInt(offset + 3));
        entity.setLastUpdated(cursor.isNull(offset + 4) ? null : new java.util.Date(cursor.getLong(offset + 4)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DTask entity, long rowId) {
        return entity.getGUID();
    }
    
    @Override
    public String getKey(DTask entity) {
        if(entity != null) {
            return entity.getGUID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DTask entity) {
        return entity.getGUID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dTaskList" to-many relationship of DPoint. */
    public List<DTask> _queryDPoint_DTaskList(String pointId) {
        synchronized (this) {
            if (dPoint_DTaskListQuery == null) {
                QueryBuilder<DTask> queryBuilder = queryBuilder();
                queryBuilder.join(DLinkTaskPoint.class, DLinkTaskPointDao.Properties.TaskId)
                    .where(DLinkTaskPointDao.Properties.PointId.eq(pointId));
                dPoint_DTaskListQuery = queryBuilder.build();
            }
        }
        Query<DTask> query = dPoint_DTaskListQuery.forCurrentThread();
        query.setParameter(0, pointId);
        return query.list();
    }

}
