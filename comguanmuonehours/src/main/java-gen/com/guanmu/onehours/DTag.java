package com.guanmu.onehours;

import org.greenrobot.greendao.annotation.*;

import java.util.List;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DTAG".
 */
@Entity(active = true, indexes = {@Index(value = "name,belong", unique = true)})
public class DTag {

    @Id
    private String GUID;
    private String name;
    private String belong;
    private String parentId;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    @ToOne(joinProperty = "parentId")
    private DTag parent;

    @Generated(hash = 1099500445)
    private transient String parent__resolvedKey;
    @ToMany(joinProperties = {
        @JoinProperty(name = "GUID", referencedName = "parentId")
    })
    private List<DTag> children;


    @ToMany(joinProperties = {
            @JoinProperty(name = "GUID", referencedName = "tagId")
    })
    private List<DLinkTagPoint> dLinkPointList;

    @ToMany()
    @JoinEntity(entity=DLinkTagPoint.class, sourceProperty = "tagId", targetProperty = "pointId")
    private List<DPoint> dPointList;
    /** Used for active entity operations. */
    @Generated(hash = 2018077742)
    private transient DTagDao myDao;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated(hash = 225553767)
    public DTag() {
    }

    public DTag(String GUID) {
        this.GUID = GUID;
    }

    @Generated(hash = 1776208025)
    public DTag(String GUID, String name, String belong, String parentId) {
        this.GUID = GUID;
        this.name = name;
        this.belong = belong;
        this.parentId = parentId;
    }


    public String getGUID() {
        return GUID;
    }

    public void setGUID(String GUID) {
        this.GUID = GUID;
    }

    public String getName() {
        return name;
    }

    public void setName(String name) {
        this.name = name;
    }

    public String getBelong() {
        return belong;
    }

    public void setBelong(String belong) {
        this.belong = belong;
    }

    public String getParentId() {
        return parentId;
    }

    public void setParentId(String parentId) {
        this.parentId = parentId;
    }

    /** To-one relationship, resolved on first access. */
    @Generated(hash = 982444471)
    public DTag getParent() {
        String __key = this.parentId;
        if (parent__resolvedKey == null || parent__resolvedKey != __key) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DTagDao targetDao = daoSession.getDTagDao();
            DTag parentNew = targetDao.load(__key);
            synchronized (this) {
                parent = parentNew;
                parent__resolvedKey = __key;
            }
        }
        return parent;
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1304781893)
    public void setParent(DTag parent) {
        synchronized (this) {
            this.parent = parent;
            parentId = parent == null ? null : parent.getGUID();
            parent__resolvedKey = parentId;
        }
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 526289976)
    public List<DTag> getChildren() {
        if (children == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DTagDao targetDao = daoSession.getDTagDao();
            List<DTag> childrenNew = targetDao._queryDTag_Children(GUID);
            synchronized (this) {
                if(children == null) {
                    children = childrenNew;
                }
            }
        }
        return children;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 1590975152)
    public synchronized void resetChildren() {
        children = null;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 1461440613)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDTagDao() : null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 665086784)
    public List<DPoint> getDPointList() {
        if (dPointList == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DPointDao targetDao = daoSession.getDPointDao();
            List<DPoint> dPointListNew = targetDao._queryDTag_DPointList(GUID);
            synchronized (this) {
                if(dPointList == null) {
                    dPointList = dPointListNew;
                }
            }
        }
        return dPointList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 1132009499)
    public synchronized void resetDPointList() {
        dPointList = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 246426320)
    public List<DLinkTagPoint> getDLinkPointList() {
        if (dLinkPointList == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DLinkTagPointDao targetDao = daoSession.getDLinkTagPointDao();
            List<DLinkTagPoint> dLinkPointListNew = targetDao._queryDTag_DLinkPointList(GUID);
            synchronized (this) {
                if(dLinkPointList == null) {
                    dLinkPointList = dLinkPointListNew;
                }
            }
        }
        return dLinkPointList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 311762084)
    public synchronized void resetDLinkPointList() {
        dLinkPointList = null;
    }

    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
