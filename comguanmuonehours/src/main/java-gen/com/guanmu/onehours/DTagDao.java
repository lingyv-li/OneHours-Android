package com.guanmu.onehours;

import java.util.List;
import java.util.ArrayList;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.SqlUtils;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DTAG".
*/
public class DTagDao extends AbstractDao<DTag, String> {

    public static final String TABLENAME = "DTAG";

    /**
     * Properties of entity DTag.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GUID = new Property(0, String.class, "GUID", true, "GUID");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Belong = new Property(2, String.class, "belong", false, "BELONG");
        public final static Property ParentId = new Property(3, String.class, "parentId", false, "PARENT_ID");
    }

    private DaoSession daoSession;

    private Query<DTag> dPoint_DTagListQuery;
    private Query<DTag> dTag_ChildrenQuery;

    public DTagDao(DaoConfig config) {
        super(config);
    }
    
    public DTagDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DTAG\" (" + //
                "\"GUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: GUID
                "\"NAME\" TEXT," + // 1: name
                "\"BELONG\" TEXT," + // 2: belong
                "\"PARENT_ID\" TEXT);"); // 3: parentId
        // Add Indexes
        db.execSQL("CREATE UNIQUE INDEX " + constraint + "IDX_DTAG_NAME_BELONG ON \"DTAG\"" +
                " (\"NAME\" ASC,\"BELONG\" ASC);");
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DTAG\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DTag entity) {
        stmt.clearBindings();
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(1, GUID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String belong = entity.getBelong();
        if (belong != null) {
            stmt.bindString(3, belong);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(4, parentId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DTag entity) {
        stmt.clearBindings();
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(1, GUID);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String belong = entity.getBelong();
        if (belong != null) {
            stmt.bindString(3, belong);
        }
 
        String parentId = entity.getParentId();
        if (parentId != null) {
            stmt.bindString(4, parentId);
        }
    }

    @Override
    protected final void attachEntity(DTag entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DTag readEntity(Cursor cursor, int offset) {
        DTag entity = new DTag( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // GUID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // belong
            cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3) // parentId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DTag entity, int offset) {
        entity.setGUID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setBelong(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setParentId(cursor.isNull(offset + 3) ? null : cursor.getString(offset + 3));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DTag entity, long rowId) {
        return entity.getGUID();
    }
    
    @Override
    public String getKey(DTag entity) {
        if(entity != null) {
            return entity.getGUID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DTag entity) {
        return entity.getGUID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dTagList" to-many relationship of DPoint. */
    public List<DTag> _queryDPoint_DTagList(String pointId) {
        synchronized (this) {
            if (dPoint_DTagListQuery == null) {
                QueryBuilder<DTag> queryBuilder = queryBuilder();
                queryBuilder.join(DLinkTagPoint.class, DLinkTagPointDao.Properties.TagId)
                    .where(DLinkTagPointDao.Properties.PointId.eq(pointId));
                dPoint_DTagListQuery = queryBuilder.build();
            }
        }
        Query<DTag> query = dPoint_DTagListQuery.forCurrentThread();
        query.setParameter(0, pointId);
        return query.list();
    }

    /** Internal query to resolve the "children" to-many relationship of DTag. */
    public List<DTag> _queryDTag_Children(String parentId) {
        synchronized (this) {
            if (dTag_ChildrenQuery == null) {
                QueryBuilder<DTag> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ParentId.eq(null));
                dTag_ChildrenQuery = queryBuilder.build();
            }
        }
        Query<DTag> query = dTag_ChildrenQuery.forCurrentThread();
        query.setParameter(0, parentId);
        return query.list();
    }

    private String selectDeep;

    protected String getSelectDeep() {
        if (selectDeep == null) {
            StringBuilder builder = new StringBuilder("SELECT ");
            SqlUtils.appendColumns(builder, "T", getAllColumns());
            builder.append(',');
            SqlUtils.appendColumns(builder, "T0", daoSession.getDTagDao().getAllColumns());
            builder.append(" FROM DTAG T");
            builder.append(" LEFT JOIN DTAG T0 ON T.\"PARENT_ID\"=T0.\"GUID\"");
            builder.append(' ');
            selectDeep = builder.toString();
        }
        return selectDeep;
    }
    
    protected DTag loadCurrentDeep(Cursor cursor, boolean lock) {
        DTag entity = loadCurrent(cursor, 0, lock);
        int offset = getAllColumns().length;

        DTag parent = loadCurrentOther(daoSession.getDTagDao(), cursor, offset);
        entity.setParent(parent);

        return entity;    
    }

    public DTag loadDeep(Long key) {
        assertSinglePk();
        if (key == null) {
            return null;
        }

        StringBuilder builder = new StringBuilder(getSelectDeep());
        builder.append("WHERE ");
        SqlUtils.appendColumnsEqValue(builder, "T", getPkColumns());
        String sql = builder.toString();
        
        String[] keyArray = new String[] { key.toString() };
        Cursor cursor = db.rawQuery(sql, keyArray);
        
        try {
            boolean available = cursor.moveToFirst();
            if (!available) {
                return null;
            } else if (!cursor.isLast()) {
                throw new IllegalStateException("Expected unique result, but count was " + cursor.getCount());
            }
            return loadCurrentDeep(cursor, true);
        } finally {
            cursor.close();
        }
    }
    
    /** Reads all available rows from the given cursor and returns a list of new ImageTO objects. */
    public List<DTag> loadAllDeepFromCursor(Cursor cursor) {
        int count = cursor.getCount();
        List<DTag> list = new ArrayList<DTag>(count);
        
        if (cursor.moveToFirst()) {
            if (identityScope != null) {
                identityScope.lock();
                identityScope.reserveRoom(count);
            }
            try {
                do {
                    list.add(loadCurrentDeep(cursor, false));
                } while (cursor.moveToNext());
            } finally {
                if (identityScope != null) {
                    identityScope.unlock();
                }
            }
        }
        return list;
    }
    
    protected List<DTag> loadDeepAllAndCloseCursor(Cursor cursor) {
        try {
            return loadAllDeepFromCursor(cursor);
        } finally {
            cursor.close();
        }
    }
    

    /** A raw-style query where you can pass any WHERE clause and arguments. */
    public List<DTag> queryDeep(String where, String... selectionArg) {
        Cursor cursor = db.rawQuery(getSelectDeep() + where, selectionArg);
        return loadDeepAllAndCloseCursor(cursor);
    }
 
}
