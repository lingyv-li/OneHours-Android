package com.guanmu.onehours;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.guanmu.onehours.DPoint.SyncState;
import com.guanmu.onehours.DPoint.SyncStateConverter;
import com.guanmu.onehours.DPoint.TypeConverter;
import com.guanmu.onehours.model.MPoint.Type;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "DPOINT".
*/
public class DPointDao extends AbstractDao<DPoint, String> {

    public static final String TABLENAME = "DPOINT";

    /**
     * Properties of entity DPoint.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property GUID = new Property(0, String.class, "GUID", true, "GUID");
        public final static Property Content = new Property(1, String.class, "content", false, "CONTENT");
        public final static Property MetaContent = new Property(2, String.class, "metaContent", false, "META_CONTENT");
        public final static Property Type = new Property(3, String.class, "type", false, "TYPE");
        public final static Property Proficiency = new Property(4, int.class, "proficiency", false, "PROFICIENCY");
        public final static Property AverageTime = new Property(5, long.class, "averageTime", false, "AVERAGE_TIME");
        public final static Property Count = new Property(6, int.class, "count", false, "COUNT");
        public final static Property Belong = new Property(7, String.class, "belong", false, "BELONG");
        public final static Property SyncState = new Property(8, String.class, "syncState", false, "SYNC_STATE");
        public final static Property LastUpdated = new Property(9, java.util.Date.class, "lastUpdated", false, "LAST_UPDATED");
    }

    private DaoSession daoSession;

    private final TypeConverter typeConverter = new TypeConverter();
    private final SyncStateConverter syncStateConverter = new SyncStateConverter();
    private Query<DPoint> dTag_DPointListQuery;
    private Query<DPoint> dTask_DPointListQuery;

    public DPointDao(DaoConfig config) {
        super(config);
    }
    
    public DPointDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"DPOINT\" (" + //
                "\"GUID\" TEXT PRIMARY KEY NOT NULL ," + // 0: GUID
                "\"CONTENT\" TEXT," + // 1: content
                "\"META_CONTENT\" TEXT," + // 2: metaContent
                "\"TYPE\" TEXT," + // 3: type
                "\"PROFICIENCY\" INTEGER NOT NULL ," + // 4: proficiency
                "\"AVERAGE_TIME\" INTEGER NOT NULL ," + // 5: averageTime
                "\"COUNT\" INTEGER NOT NULL ," + // 6: count
                "\"BELONG\" TEXT," + // 7: belong
                "\"SYNC_STATE\" TEXT," + // 8: syncState
                "\"LAST_UPDATED\" INTEGER);"); // 9: lastUpdated
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"DPOINT\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, DPoint entity) {
        stmt.clearBindings();
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(1, GUID);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String metaContent = entity.getMetaContent();
        if (metaContent != null) {
            stmt.bindString(3, metaContent);
        }
 
        Type type = entity.getType();
        if (type != null) {
            stmt.bindString(4, typeConverter.convertToDatabaseValue(type));
        }
        stmt.bindLong(5, entity.getProficiency());
        stmt.bindLong(6, entity.getAverageTime());
        stmt.bindLong(7, entity.getCount());
 
        String belong = entity.getBelong();
        if (belong != null) {
            stmt.bindString(8, belong);
        }
 
        SyncState syncState = entity.getSyncState();
        if (syncState != null) {
            stmt.bindString(9, syncStateConverter.convertToDatabaseValue(syncState));
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(10, lastUpdated.getTime());
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, DPoint entity) {
        stmt.clearBindings();
 
        String GUID = entity.getGUID();
        if (GUID != null) {
            stmt.bindString(1, GUID);
        }
 
        String content = entity.getContent();
        if (content != null) {
            stmt.bindString(2, content);
        }
 
        String metaContent = entity.getMetaContent();
        if (metaContent != null) {
            stmt.bindString(3, metaContent);
        }
 
        Type type = entity.getType();
        if (type != null) {
            stmt.bindString(4, typeConverter.convertToDatabaseValue(type));
        }
        stmt.bindLong(5, entity.getProficiency());
        stmt.bindLong(6, entity.getAverageTime());
        stmt.bindLong(7, entity.getCount());
 
        String belong = entity.getBelong();
        if (belong != null) {
            stmt.bindString(8, belong);
        }
 
        SyncState syncState = entity.getSyncState();
        if (syncState != null) {
            stmt.bindString(9, syncStateConverter.convertToDatabaseValue(syncState));
        }
 
        java.util.Date lastUpdated = entity.getLastUpdated();
        if (lastUpdated != null) {
            stmt.bindLong(10, lastUpdated.getTime());
        }
    }

    @Override
    protected final void attachEntity(DPoint entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public String readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0);
    }    

    @Override
    public DPoint readEntity(Cursor cursor, int offset) {
        DPoint entity = new DPoint( //
            cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0), // GUID
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // content
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // metaContent
            cursor.isNull(offset + 3) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 3)), // type
            cursor.getInt(offset + 4), // proficiency
            cursor.getLong(offset + 5), // averageTime
            cursor.getInt(offset + 6), // count
            cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7), // belong
            cursor.isNull(offset + 8) ? null : syncStateConverter.convertToEntityProperty(cursor.getString(offset + 8)), // syncState
            cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)) // lastUpdated
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, DPoint entity, int offset) {
        entity.setGUID(cursor.isNull(offset + 0) ? null : cursor.getString(offset + 0));
        entity.setContent(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setMetaContent(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setType(cursor.isNull(offset + 3) ? null : typeConverter.convertToEntityProperty(cursor.getString(offset + 3)));
        entity.setProficiency(cursor.getInt(offset + 4));
        entity.setAverageTime(cursor.getLong(offset + 5));
        entity.setCount(cursor.getInt(offset + 6));
        entity.setBelong(cursor.isNull(offset + 7) ? null : cursor.getString(offset + 7));
        entity.setSyncState(cursor.isNull(offset + 8) ? null : syncStateConverter.convertToEntityProperty(cursor.getString(offset + 8)));
        entity.setLastUpdated(cursor.isNull(offset + 9) ? null : new java.util.Date(cursor.getLong(offset + 9)));
     }
    
    @Override
    protected final String updateKeyAfterInsert(DPoint entity, long rowId) {
        return entity.getGUID();
    }
    
    @Override
    public String getKey(DPoint entity) {
        if(entity != null) {
            return entity.getGUID();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(DPoint entity) {
        return entity.getGUID() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "dPointList" to-many relationship of DTag. */
    public List<DPoint> _queryDTag_DPointList(String tagId) {
        synchronized (this) {
            if (dTag_DPointListQuery == null) {
                QueryBuilder<DPoint> queryBuilder = queryBuilder();
                queryBuilder.join(DLinkTagPoint.class, DLinkTagPointDao.Properties.PointId)
                    .where(DLinkTagPointDao.Properties.TagId.eq(tagId));
                dTag_DPointListQuery = queryBuilder.build();
            }
        }
        Query<DPoint> query = dTag_DPointListQuery.forCurrentThread();
        query.setParameter(0, tagId);
        return query.list();
    }

    /** Internal query to resolve the "dPointList" to-many relationship of DTask. */
    public List<DPoint> _queryDTask_DPointList(String taskId) {
        synchronized (this) {
            if (dTask_DPointListQuery == null) {
                QueryBuilder<DPoint> queryBuilder = queryBuilder();
                queryBuilder.join(DLinkTaskPoint.class, DLinkTaskPointDao.Properties.PointId)
                    .where(DLinkTaskPointDao.Properties.TaskId.eq(taskId));
                dTask_DPointListQuery = queryBuilder.build();
            }
        }
        Query<DPoint> query = dTask_DPointListQuery.forCurrentThread();
        query.setParameter(0, taskId);
        return query.list();
    }

}
