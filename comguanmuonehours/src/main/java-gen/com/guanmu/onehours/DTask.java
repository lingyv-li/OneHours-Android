package com.guanmu.onehours;

import org.greenrobot.greendao.annotation.*;

import java.util.List;

import org.greenrobot.greendao.DaoException;

// THIS CODE IS GENERATED BY greenDAO, EDIT ONLY INSIDE THE "KEEP"-SECTIONS

// KEEP INCLUDES - put your custom includes here
// KEEP INCLUDES END
/**
 * Entity mapped to table "DTASK".
 */
@Entity(active = true)
public class DTask {

    @Id
    private String GUID;
    private java.util.Date date;
    @NotNull
    private long usedTime;
    @NotNull
    private int count;
    private java.util.Date lastUpdated;

    /** Used to resolve relations */
    @Generated(hash = 2040040024)
    private transient DaoSession daoSession;
    @ToMany(joinProperties = {
        @JoinProperty(name = "GUID", referencedName = "taskId")
    })
    private List<DLinkTaskPoint> dLinkPointList;


    @ToMany
    @JoinEntity(entity=DLinkTaskPoint.class, sourceProperty = "taskId", targetProperty = "pointId")
    private List<DPoint> dPointList;


    /** Used for active entity operations. */
    @Generated(hash = 1454219340)
    private transient DTaskDao myDao;

    // KEEP FIELDS - put your custom fields here
    // KEEP FIELDS END

    @Generated(hash = 862040252)
    public DTask() {
    }

    public DTask(String GUID) {
        this.GUID = GUID;
    }

    @Generated(hash = 1136051592)
    public DTask(String GUID, java.util.Date date, long usedTime, int count, java.util.Date lastUpdated) {
        this.GUID = GUID;
        this.date = date;
        this.usedTime = usedTime;
        this.count = count;
        this.lastUpdated = lastUpdated;
    }

    public String getGUID() {
        return GUID;
    }

    public void setGUID(String GUID) {
        this.GUID = GUID;
    }

    public java.util.Date getDate() {
        return date;
    }

    public void setDate(java.util.Date date) {
        this.date = date;
    }

    public Long getUsedTime() {
        return usedTime;
    }

    public void setUsedTime(Long usedTime) {
        this.usedTime = usedTime;
    }

    public Integer getCount() {
        return count;
    }

    public void setCount(Integer count) {
        this.count = count;
    }

    public java.util.Date getLastUpdated() {
        return lastUpdated;
    }

    public void setLastUpdated(java.util.Date lastUpdated) {
        this.lastUpdated = lastUpdated;
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#delete(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 128553479)
    public void delete() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.delete(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#refresh(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 1942392019)
    public void refresh() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.refresh(this);
    }

    /**
     * Convenient call for {@link org.greenrobot.greendao.AbstractDao#update(Object)}.
     * Entity must attached to an entity context.
     */
    @Generated(hash = 713229351)
    public void update() {
        if (myDao == null) {
            throw new DaoException("Entity is detached from DAO context");
        }
        myDao.update(this);
    }

    /** called by internal mechanisms, do not call yourself. */
    @Generated(hash = 2072509561)
    public void __setDaoSession(DaoSession daoSession) {
        this.daoSession = daoSession;
        myDao = daoSession != null ? daoSession.getDTaskDao() : null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 2040994607)
    public List<DLinkTaskPoint> getDLinkPointList() {
        if (dLinkPointList == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DLinkTaskPointDao targetDao = daoSession.getDLinkTaskPointDao();
            List<DLinkTaskPoint> dLinkPointListNew = targetDao._queryDTask_DLinkPointList(GUID);
            synchronized (this) {
                if(dLinkPointList == null) {
                    dLinkPointList = dLinkPointListNew;
                }
            }
        }
        return dLinkPointList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 311762084)
    public synchronized void resetDLinkPointList() {
        dLinkPointList = null;
    }

    /**
     * To-many relationship, resolved on first access (and after reset).
     * Changes to to-many relations are not persisted, make changes to the target entity.
     */
    @Generated(hash = 306009581)
    public List<DPoint> getDPointList() {
        if (dPointList == null) {
            final DaoSession daoSession = this.daoSession;
            if (daoSession == null) {
                throw new DaoException("Entity is detached from DAO context");
            }
            DPointDao targetDao = daoSession.getDPointDao();
            List<DPoint> dPointListNew = targetDao._queryDTask_DPointList(GUID);
            synchronized (this) {
                if(dPointList == null) {
                    dPointList = dPointListNew;
                }
            }
        }
        return dPointList;
    }

    /** Resets a to-many relationship, making the next get call to query for a fresh result. */
    @Generated(hash = 1132009499)
    public synchronized void resetDPointList() {
        dPointList = null;
    }

    public void setUsedTime(long usedTime) {
        this.usedTime = usedTime;
    }

    public void setCount(int count) {
        this.count = count;
    }


    // KEEP METHODS - put your custom methods here
    // KEEP METHODS END

}
